generator kysely {
  provider     = "prisma-kysely"
  output       = "../src/server"
  enumFileName = "enums.ts"
  fileName     = "types.ts"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model account {
  id           String    @id
  accountId    String
  providerId   String
  userId       String
  accessToken  String?
  refreshToken String?
  idToken      String?
  expiresAt    DateTime? @db.Date
  password     String?
  user         user      @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model session {
  id        String   @id
  expiresAt DateTime @db.Date
  ipAddress String?
  userAgent String?
  userId    String
  user      user     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model user {
  id            String    @id
  name          String
  email         String    @unique
  emailVerified Boolean
  image         String?
  createdAt     DateTime  @db.Date
  updatedAt     DateTime  @db.Date
  account       account[]
  session       session[]
  artist        artist[]
  cart          cart?
  wishlist      wishlist?
  order         order[]
  review        review[]
}

model verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime  @db.Date
  createdAt  DateTime? @db.Date
}

model artist {
  id                     String            @id
  name                   String
  bio                    String
  portfolioUrl           String?
  paystackSubAccountCode String
  createdAt              DateTime          @db.Date
  updatedAt              DateTime          @db.Date
  userId                 String
  user                   user              @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  artwork                artwork[]
  scheduledUpload        scheduledUpload[]
}

model image {
  id                String           @id
  url               String
  blurhash          String
  artwork           artwork?         @relation(fields: [artworkId], references: [id], onDelete: Cascade)
  artworkId         String?
  scheduledUpload   scheduledUpload? @relation(fields: [scheduledUploadId], references: [id], onDelete: Cascade)
  scheduledUploadId String?
}

model artwork {
  id          String       @id
  title       String
  description String
  price       Float
  images      image[]
  dimensions  String // format: "length x width x height"
  weight      Float?
  condition   ArtCondition
  stock       Int?
  createdAt   DateTime     @db.Date
  updatedAt   DateTime     @db.Date
  artistId    String
  artist      artist       @relation(fields: [artistId], references: [id], onDelete: Cascade)
  orderItem   orderItem[]
  cart        cart[]
  wishlist    wishlist[]
  discount    discount[]
  review      review[]
  category    CategoryName
}

model scheduledUpload {
  id          String       @id
  title       String
  description String
  price       Float
  images      image[]
  dimensions  String
  weight      Float?
  condition   ArtCondition
  stock       Int
  scheduledAt DateTime     @db.Date
  status      UploadStatus @default(PENDING)
  createdAt   DateTime     @db.Date
  updatedAt   DateTime     @db.Date
  artistId    String
  artist      artist       @relation(fields: [artistId], references: [id], onDelete: Cascade)
  category    CategoryName
  categoryId  String
}

model order {
  id             String         @id
  userId         String
  user           user           @relation(fields: [userId], references: [id])
  totalPrice     Float
  shippingStatus ShippingStatus @default(PENDING)
  createdAt      DateTime       @db.Date
  updatedAt      DateTime       @db.Date
  orderItem      orderItem[]
}

model orderItem {
  id             String    @id
  orderId        String
  order          order     @relation(fields: [orderId], references: [id])
  artworkId      String
  artwork        artwork   @relation(fields: [artworkId], references: [id])
  quantity       Int
  price          Decimal   @db.Decimal(10, 2) // Original price
  discountId     String? // Reference to applied discount if any
  discount       discount? @relation(fields: [discountId], references: [id])
  discountAmount Decimal?  @db.Decimal(10, 2) // Amount saved from discount
  finalPrice     Decimal   @db.Decimal(10, 2) // Price after discount
  platformFee    Decimal   @db.Decimal(10, 2)
  createdAt      DateTime  @db.Date
  updatedAt      DateTime  @db.Date

  @@index([orderId])
  @@index([artworkId])
  @@index([discountId])
}

model cart {
  id        String    @id
  userId    String    @unique
  user      user      @relation(fields: [userId], references: [id])
  artworks  artwork[]
  createdAt DateTime  @db.Date
  updatedAt DateTime  @db.Date
}

model discount {
  id          String      @id
  code        String      @unique
  description String
  percentage  Float
  startDate   DateTime    @db.Date
  endDate     DateTime    @db.Date
  minAmount   Float? // Minimum order amount for discount to apply
  maxUses     Int? // Maximum number of times the discount can be used
  usedCount   Int         @default(0) // Track how many times code has been used
  isActive    Boolean     @default(true) // Whether the discount is currently active
  artworks    artwork[]
  createdAt   DateTime    @db.Date
  updatedAt   DateTime    @db.Date
  orderItem   orderItem[]
}

model wishlist {
  id        String    @id
  userId    String    @unique
  user      user      @relation(fields: [userId], references: [id])
  artworks  artwork[]
  createdAt DateTime  @db.Date
  updatedAt DateTime  @db.Date
}

model review {
  id        String   @id
  content   String
  rating    Int
  createdAt DateTime @db.Date
  userId    String
  user      user     @relation(fields: [userId], references: [id])
  artworkId String
  artwork   artwork  @relation(fields: [artworkId], references: [id])
}

enum ShippingStatus {
  PENDING
  SHIPPED
  DELIVERED
}

enum CategoryName {
  PAINTING
  SCULPTURE
  PHOTOGRAPHY
  DIGITAL
  MIXED_MEDIA
  DRAWING
  PRINTMAKING
  TEXTILE
  CERAMIC
  OTHER
}

enum ArtCondition {
  MINT
  EXCELLENT
  GOOD
  FAIR
  POOR
}

enum UploadStatus {
  PENDING
  COMPLETED
  FAILED
}
